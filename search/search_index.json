{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The KIB in Batch project","text":"<p>Run Unix tools on Windows easily</p> <p>Welcome to the homepage of the KIB in Batch project. This mainly contains documentation in other pages, but here you can see short info about the project.</p>"},{"location":"#why-use-kib-in-batch","title":"Why use KIB in Batch","text":"<p>KIB in Batch is a lightweight Unix-like environment for Microsoft Windows.</p>"},{"location":"#enterprise-ready","title":"Enterprise Ready","text":"<ul> <li>A minimal installation (without Nmap and Neovim) weighs only around 1 megabyte.</li> <li>The project runs on any Windows version that is Windows 10 or newer (system must have cURL in PATH).</li> <li>The project contains lots of features and an LTS version.</li> </ul>"},{"location":"#easy-command-line-shell","title":"Easy command-line shell","text":"<ul> <li>Unix commands are easy to learn. They are all abbreviations, so for example to list files, you can use <code>ls</code>. For the list of the Unix commands, type <code>busybox</code>.</li> </ul>"},{"location":"#productivity","title":"Productivity","text":"<ul> <li>Use Neovim to configure, take notes, write documents, etc.</li> <li>Use ping to test that your network is working.</li> <li>Use curl to download files from the internet.</li> <li>KIB in Batch uninstaller handles back ups of your home directory when you uninstall, so if you reinstall you will be able to seamlessly continue your work.</li> </ul>"},{"location":"#easy-installation","title":"Easy installation","text":"<ul> <li>Download the latest version from GitHub. Specifically download kib_in_batch.zip.</li> <li>Run kib_in_batch.bat.</li> <li>Quickly get KIB in Batch running.</li> <li>On the non-LTS version, deploy containers using KIBDock.</li> </ul>"},{"location":"#use-cases","title":"Use cases","text":"<ul> <li>IoT devices: KIB in Batch is a great tool for IoT devices. It is lightweight and, on IoT devices, it easily beats Cygwin, Msys and WSL.</li> <li>As a shell to run when SSHing to a Windows server: Usually, you would not want to use CMD or PowerShell for a server. This is where KIB in Batch comes in, you run KIB in Batch on the server and you can use Unix commands while managing the Windows server.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>KIBDock for creating and deploying containers.</li> <li>Package manager (KIB-pkg) for installing and uninstalling packages.</li> <li>BusyBox for a lightweight suite of Unix utilities.</li> <li>Nmap (can be skipped if you use manual install).</li> <li>Neovim (can be skipped if you use manual install).</li> </ul>"},{"location":"intro/","title":"Introduction to the KIB in Batch project","text":""},{"location":"intro/#1-what-is-kib-in-batch","title":"1. What is KIB in Batch?","text":"<p>KIB in Batch is an FLOSS (Free/Libre and Open-Source Software) project that has made the software of the same name as the project. KIB in Batch (the software) is distributed under the GPL-2.0-only.</p>"},{"location":"intro/#11-what-is-kib-in-batch-used-for","title":"1.1. What is KIB in Batch used for?","text":"<p>KIB in Batch allows running a Unix-like environment on Windows systems. On a regular install, you have the following tools:</p> <ul> <li>BusyBox - a collection of Unix tools</li> <li>KIBDock - a containerization software for KIB</li> <li>KIB-pkg - a package manager for KIB</li> <li>Nmap - a network scanning tool</li> <li>Neovim - a text editor</li> </ul>"},{"location":"kib-in-batch-package-management/","title":"KIB in Batch Package Management","text":"<p>You can manage packages in KIB in Batch using KIB-pkg, a command-line tool. KIB-pkg is a package manager that allows you to install, upgrade and remove packages.</p>"},{"location":"kib-in-batch-package-management/#1-installing-packages","title":"1. Installing packages","text":"<p>Install packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg install &lt;package_name&gt;\n</code></pre>"},{"location":"kib-in-batch-package-management/#2-upgrading-packages","title":"2. Upgrading packages","text":"<p>Upgrade packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg upgrade &lt;package_name&gt;\n</code></pre>"},{"location":"kib-in-batch-package-management/#3-removing-packages","title":"3. Removing packages","text":"<p>Remove packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg remove &lt;package_name&gt;\n</code></pre>"},{"location":"kib-in-batch-package-management/#4-listing-packages","title":"4. Listing packages","text":"<p>List installed packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg list\n</code></pre> <p>List available packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg list-available\n</code></pre>"},{"location":"kib-in-batch-package-management/#5-searching-for-packages","title":"5. Searching for packages","text":"<p>Search for packages using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg search &lt;package_name&gt;\n</code></pre>"},{"location":"kib-in-batch-package-management/#6-getting-package-metadata","title":"6. Getting package metadata","text":"<p>Get package metadata using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg info &lt;package_name&gt;\n</code></pre>"},{"location":"kib-in-batch-package-management/#7-get-additional-help-with-kib-pkg","title":"7. Get additional help with KIB-pkg","text":"<p>Get additional help with KIB-pkg using the following command in the KIB in Batch shell:</p> <pre><code>kib-pkg help\n</code></pre>"},{"location":"kib-in-batch-posix-api/","title":"KIB in Batch POSIX API","text":"<p>KIB in Batch also reimplements parts of the POSIX API, allowing compiling and running of Unix programs that adhere to the implemented functions.</p>"},{"location":"kib-in-batch-posix-api/#1-compiling-and-running-unix-programs","title":"1. Compiling and Running Unix Programs","text":"<p>It is rather simple, these are the steps:</p> <ul> <li>Install a C compiler on your host that supports the -I flag. I recommend Clang.</li> <li>Open a KIB in Batch shell and run the following:</li> </ul> <pre><code>clang -I/usr/include -o unix_program.exe unix_program.c\n./unix_program\n</code></pre>"},{"location":"kib-in-batch-posix-api/#2-using-apis-from-batch-files","title":"2. Using APIs from Batch files","text":"<p>A select amount of APIs use Batch files as the backend. That means they can be called from batch files.</p> <p>For example, to use the mkdir function, you can use the following:</p> <pre><code>@echo off\ncall \"%USERPROFILE%\\kib\\usr\\lib\\posix\\mkdir.bat\" my_directory 0755 &amp; rem Mode is ignored, only there for compatibility\n</code></pre>"},{"location":"kib-in-batch-posix-api/#3-using-apis-from-c-programs","title":"3. Using APIs from C programs","text":"<p>Here is an example of a C program using some APIs:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/stat.h&gt;\n\nint main() {\n    char cwd[4096];\n\n    if (getcwd(cwd, sizeof(cwd)) != NULL) {\n        printf(\"Current working directory: %s\\n\", cwd);\n    } else {\n        perror(\"getcwd() error\");   \n        return 1;\n    }\n\n    // Create a new directory\n    printf(\"Creating demo_directory... \");\n    mkdir(\"demo_directory\", 0777);\n    printf(\"Created demo_directory\\n\");\n\n    // Change to demo_directory\n    printf(\"Changing to demo_directory... \");\n    if (chdir(\"demo_directory\") != 0) {\n        perror(\"chdir() error\");\n        return 1;\n    } else {\n        printf(\"Changed to demo_directory\\n\");\n        char cwd2[4096];\n        if (getcwd(cwd2, sizeof(cwd2)) != NULL) {\n            printf(\"Current working directory: %s\\n\", cwd2);\n        } else {\n            perror(\"getcwd() error\");\n        }\n    }\n\n    printf(\"Sleeping for 2 seconds... \");\n    sleep(2);\n    printf(\"Slept for 2 seconds\\n\");\n\n    return 0;\n}\n</code></pre> <p>Compile it using the steps defined in 1.</p>"},{"location":"kib-in-batch/","title":"KIB in Batch","text":""},{"location":"kib-in-batch/#1-how-to-use-kib-in-batch","title":"1. How to use KIB in Batch?","text":"<ul> <li>Download <code>kib_in_batch.zip</code> from the latest release.</li> <li>Extract the ZIP file to a directory of your choice.</li> <li>Open a terminal or command prompt and navigate to the extracted directory.</li> <li>Run <code>kib_in_batch.bat</code>. If it is not at ZIP file root, it is inside src.</li> <li>Go through the installer. Follow any additional instructions provided by the installer.</li> <li>It will then boot up the Unix-like environment.</li> </ul>"},{"location":"kib-in-batch/#2-how-to-configure-kib-in-batch","title":"2. How to configure KIB in Batch?","text":"<p>You should open the KIB in Batch shell. Once there, use a text editor to edit <code>~/.bashrc</code>. This file is where you can configure your environment. You can add aliases, functions, and environment variables to this file.</p> <p>For example, to edit it with Neovim:</p> <pre><code>nvim ~/.bashrc\n</code></pre>"},{"location":"kib-in-batch/#2-what-is-kib-in-batchs-purpose","title":"2. What is KIB in Batch's purpose?","text":"<p>KIB in Batch is a Unix-like environment for Windows. It has multiple Unix utilities and a package manager. Our goal with this is to have a new competitor to Cygwin, MSYS2, and Windows Subsystem for Linux (WSL).</p>"},{"location":"kib-in-batch/#3-kib-in-batchs-redistribution-terms","title":"3. KIB in Batch's redistribution terms","text":"<p>KIB in Batch, the software, can be redistributed under the terms of the GNU GPL version 2. Strictly that version, no later, no earlier.</p>"},{"location":"kibdock/","title":"KIBDock","text":"<p>KIBDock is the containerization software that comes with KIB in Batch.</p>"},{"location":"kibdock/#1-initializing-kibdock","title":"1. Initializing KIBDock","text":"<p>Initialize the KIBDock service in the KIB in Batch shell:</p> <pre><code>kibdock init\n</code></pre> <p>You can then get help information about it:</p> <pre><code>kibdock help\n</code></pre>"},{"location":"kibdock/#2-creating-and-deploying-a-kibdock-container","title":"2. Creating and deploying a KIBDock container","text":"<p>Create the KIBDock container:</p> <pre><code>kibdock create # It will prompt you for container and image name\n</code></pre> <p>Deploy the KIBDock container:</p> <pre><code>kibdock deploy # It will prompt you for container name\n# This will drop you into an interactive shell for the container\n</code></pre>"},{"location":"blog/bots-001/","title":"Bots are copying random GitHub repos","text":"<p>Date: August 16, 2025</p> <p>Author: benja2998</p>"},{"location":"blog/bots-001/#bots-are-copying-random-github-repos","title":"Bots are copying random GitHub repos","text":"<p>If you have ever searched for \"Kali in Batch\" on GitHub, chances are you have stumbled across this repository.</p> <p>There is VERY weird activity here, they force push an AI slop README exactly every 1 hour, which makes me think it is a bot network. The bot network is copying random GitHub repos and forcing pushing them with an AI slop README.</p> <p>Probably also part of the bot network but on a different account is this repository. They force push an AI slop README, but this time every 2 hours.</p> <p>There's even a third one, where they too force push an AI slop README every 1 hour.</p> <p>The thing in common with all these repositories is that they all have a README file with an AI slop, force push the exact same README, and the original repos are quite niche. Also, the repos i mentioned are cloning repos made by ME.</p>"},{"location":"blog/bots-001/#possible-reason-for-this-activity","title":"Possible reason for this activity","text":"<p>Looking at how much SEO there is, my theory is that someone is running a bot network to overshadow the original repositories of niche projects. This is not good activity.</p>"},{"location":"blog/bots-001/#links-to-original-repos-not-the-copies-made-by-the-bot-network","title":"Links to original repos (not the copies made by the bot network)","text":"<ul> <li>KIB in Batch</li> <li>KIB in Batch packages</li> <li>Warp Terminal Is Bad</li> </ul>"},{"location":"blog/warp-002/","title":"Warp Terminal is not a proper terminal","text":"<p>Date: August 16, 2025</p> <p>Author: benja2998</p>"},{"location":"blog/warp-002/#warp-terminal-is-not-a-proper-terminal","title":"Warp Terminal is not a proper terminal","text":"<p>If you are catched up with the tech space, chances are you've stumbled across the Warp Terminal at some point. It's a terminal that they say is AI-powered and has a built-in text editor. Doesn't that remind you of not following Unix philosophy?</p>"},{"location":"blog/warp-002/#unix-philosophy","title":"Unix philosophy","text":"<p>Unix philosophy consist of the following principle:</p> <ul> <li>Make each program do one thing well.</li> </ul> <p>Warp terminal, despite being a terminal emulator that should only give you control over your system, has a text editor AND is proprietary! It also has AI features and requires you to sign in??</p>"},{"location":"blog/warp-002/#their-website","title":"Their website","text":"<p>Their website is the worst part, IT DOESN'T EVEN SHOW EXAMPLES OF USING IT AS A TERMINAL! IT'S ALL JUST AI PROMPTS! And ALL the buttons, text and images are SUPER large? What happened to readability?!</p> <p>And at the bottom of course there are fake quotes from random people. It even takes a while to get examples of actually using it as a terminal in the DOCUMENTATION.</p>"},{"location":"blog/warp-002/#conclusion","title":"Conclusion","text":"<p>Warp terminal is not a proper terminal. It's a proprietary, AI-powered, text editor with a terminal. It's a disaster of modern engineering, and despite running on Unix-like systems, it doesn't follow the Unix philosophy. It's a shame, because it could have been a great terminal because it has GPU acceleration and is written in Rust.</p>"}]}